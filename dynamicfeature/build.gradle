plugins {
    id 'com.android.dynamic-feature'
    id 'kotlin-android'
    id 'jacoco'
    id 'org.sonarqube'
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugKotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)   // kotlin classes
    def debugJavaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)   // java classes
    def mainSrc = "$project.projectDir/src/main/java"


    additionalSourceDirs.setFrom(files([mainSrc]))    // for kotlin
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugKotlinTree, debugJavaTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

sonarqube {
    properties {
        property "sonar.projectName", "dynamic-1"
        property "sonar.projectKey", "dynamic-1"
//            property "sonar.login", "d9d6c1821f36670639a07227ad8dca19a90d4562"
        property "sonar.sources", "src/main/java"    // Needed

        property "sonar.projectVersion", "1.0.0"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"

        // taken from `jacoco.gradle`
        property "sonar.coverage.exclusions", "**/R.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*"
    }
}

//tasks.sonarqube.dependsOn "jacocoTestReport"
tasks.sonarqube.dependsOn ":dynamicfeature:jacocoTestReport"


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.mzhang.dynamicfeature"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation project(":homeActivity")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    testImplementation 'junit:junit:4.+'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'

    //
//    androidTestImplementation 'androidx.test:core:1.3.0'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
//    androidTestImplementation 'androidx.test:rules:1.3.0'
//    androidTestImplementation 'androidx.test:runner:1.3.0'
//    androidTestUtil 'androidx.test:orchestrator:1.3.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'org.robolectric:robolectric:3.4.2'

}